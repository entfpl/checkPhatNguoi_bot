// --- C·∫•u h√¨nh Discord ---
// THAY B·∫∞NG LINK WEBHOOK C·ª¶A B·∫†N (v√†o k√™nh Discord > Edit Channel > Integrations > Webhook > Copy URL)
const DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/YOUR_WEBHOOK';

function sendDiscordMessage(content) {
  if (content.length > 1900) {
    content = content.substring(0, 1900) + '\n... (tin nh·∫Øn qu√° d√†i, ƒë√£ c·∫Øt b·ªõt)';
  }

  const options = {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify({ content }),
    muteHttpExceptions: true,
  };

  try {
    const response = UrlFetchApp.fetch(DISCORD_WEBHOOK_URL, options);
    const code = response.getResponseCode();

    if (code >= 200 && code < 300) {
      Logger.log('ƒê√£ g·ª≠i tin nh·∫Øn Discord.');
      return true;
    } else {
      Logger.log('L·ªói g·ª≠i Discord: ' + code + ' - ' + response.getContentText());
      return false;
    }
  } catch (e) {
    Logger.log('L·ªói khi g·ª≠i Discord: ' + e.toString());
    return false;
  }
}

function getPhatNguoiDataForPlate(bienso) {
  const cleanedBienso = bienso.replace(/\s+/g, "").replace(/[^a-zA-Z0-9]/g, "");
  if (!cleanedBienso) return '‚ö†Ô∏è Bi·ªÉn s·ªë tr·ªëng/kh√¥ng h·ª£p l·ªá.';

  const apiUrl = 'https://api.checkphatnguoi.vn/phatnguoi';
  const payload = { bienso: cleanedBienso };
  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  try {
    const response = UrlFetchApp.fetch(apiUrl, options);
    if (response.getResponseCode() >= 200 && response.getResponseCode() < 300) {
      return parsePhatNguoiResponse(response.getContentText(), bienso);
    } else {
      Logger.log('API ch√≠nh l·ªói: ' + response.getContentText());
      return tryBackupAPI(cleanedBienso, bienso);
    }
  } catch (e) {
    Logger.log('L·ªói API ch√≠nh: ' + e.toString());
    return tryBackupAPI(cleanedBienso, bienso);
  }
}

function tryBackupAPI(cleanedBienso, rawBienso) {
  const backupUrl = `https://api.phatnguoi.vn/tra-cuu/${cleanedBienso}/1`;
  const options = {
    method: 'get',
    muteHttpExceptions: true,
  };

  try {
    const response = UrlFetchApp.fetch(backupUrl, options);
    if (response.getResponseCode() >= 200 && response.getResponseCode() < 300) {
      return parseBackupApiResponse(response.getContentText(), rawBienso);
    } else {
      return `‚ùå Bi·ªÉn s·ªë: ${rawBienso} - API d·ª± ph√≤ng l·ªói (${response.getResponseCode()})`;
    }
  } catch (e) {
    return `‚ùå Bi·ªÉn s·ªë: ${rawBienso} - L·ªói khi g·ªçi API d·ª± ph√≤ng: ` + e.toString();
  }
}

function parsePhatNguoiResponse(responseText, bienso) {
  try {
    const data = JSON.parse(responseText);

    if (data.error) {
      return '‚ùå Bi·ªÉn s·ªë: ' + bienso + ' - L·ªói API: ' + data.error;
    } else if (data.data?.length > 0) {
      const pending = data.data.filter(i => i["Tr·∫°ng th√°i"] === "Ch∆∞a x·ª≠ ph·∫°t");
      const resolved = data.data.filter(i => i["Tr·∫°ng th√°i"] === "ƒê√£ x·ª≠ ph·∫°t");
      let msg = '';

      if (pending.length > 0) {
        msg += 'üö®üö® Bi·ªÉn s·ªë: ' + bienso + ' - C√ì L·ªñI PH·∫†T NGU·ªòI CH∆ØA X·ª¨ PH·∫†T!\n\n';
        msg += pending.map(i => {
          const noi = Array.isArray(i["N∆°i gi·∫£i quy·∫øt v·ª• vi·ªác"]) ? i["N∆°i gi·∫£i quy·∫øt v·ª• vi·ªác"].join(', ') : (i["N∆°i gi·∫£i quy·∫øt v·ª• vi·ªác"] || 'Kh√¥ng r√µ');
          return `- Th·ªùi gian: ${i["Th·ªùi gian vi ph·∫°m"]}\n- ƒê·ªãa ƒëi·ªÉm: ${i["ƒê·ªãa ƒëi·ªÉm vi ph·∫°m"]}\n- H√†nh vi: ${i["H√†nh vi vi ph·∫°m"]}\n- Tr·∫°ng th√°i: ${i["Tr·∫°ng th√°i"]}\n- N∆°i gi·∫£i quy·∫øt: ${noi}`;
        }).join('\n---\n');

        if (resolved.length > 0) {
          msg += `\n\n_(${resolved.length} l·ªói ƒë√£ x·ª≠ ph·∫°t tr∆∞·ªõc ƒë√≥)_`;
        }

      } else if (resolved.length > 0) {
        msg = '‚úÖ Bi·ªÉn s·ªë: ' + bienso + ` - C√≥ l·ªói ph·∫°t ngu·ªôi nh∆∞ng "T·∫§T C·∫¢ ${resolved.length} L·ªñI ƒê√É X·ª¨ PH·∫†T".`;
      } else {
        msg = '‚úÖ Bi·ªÉn s·ªë: ' + bienso + ' - C√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ nh∆∞ng kh√¥ng ph√¢n lo·∫°i ƒë∆∞·ª£c l·ªói.';
      }

      return msg;
    } else {
      return '‚úÖ Bi·ªÉn s·ªë: ' + bienso + ' - Kh√¥ng t√¨m th·∫•y l·ªói ph·∫°t ngu·ªôi.';
    }

  } catch (e) {
    return '‚ùå Bi·ªÉn s·ªë: ' + bienso + ' - L·ªói ph√¢n t√≠ch k·∫øt qu·∫£: ' + e.toString();
  }
}

function parseBackupApiResponse(responseText, bienso) {
  try {
    const data = JSON.parse(responseText);

    if (!data.status || !Array.isArray(data.data) || data.data.length === 0) {
      return `‚úÖ Bi·ªÉn s·ªë: ${bienso} - Kh√¥ng t√¨m th·∫•y l·ªói ph·∫°t ngu·ªôi (API d·ª± ph√≤ng).`;
    }

    const entries = data.data[0];
    const get = (title) => {
      const found = entries.find(e => e.title.toLowerCase().includes(title.toLowerCase()));
      return found ? found.content : 'Kh√¥ng r√µ';
    };

    const trangThai = get("Tr·∫°ng th√°i") || "Kh√¥ng r√µ";
    const thoiGian = get("Th·ªùi gian vi ph·∫°m");
    const diaDiem = get("ƒê·ªãa ƒëi·ªÉm vi ph·∫°m");
    const hanhVi = get("H√†nh vi vi ph·∫°m");
    const noiGiaiQuyet = get("N∆°i gi·∫£i quy·∫øt v·ª• vi·ªác");

    let msg = '';

    if (trangThai.toLowerCase().includes("ch∆∞a")) {
      msg += `üö®üö® Bi·ªÉn s·ªë: ${bienso} - C√ì L·ªñI PH·∫†T NGU·ªòI CH∆ØA X·ª¨ PH·∫†T (API d·ª± ph√≤ng)!\n\n`;
    } else {
      msg += `‚úÖ Bi·ªÉn s·ªë: ${bienso} - L·ªói ƒë√£ x·ª≠ l√Ω ho·∫∑c tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh.\n\n`;
    }

    msg += `- Th·ªùi gian: ${thoiGian}\n`;
    msg += `- ƒê·ªãa ƒëi·ªÉm: ${diaDiem}\n`;
    msg += `- H√†nh vi: ${hanhVi}\n`;
    msg += `- Tr·∫°ng th√°i: ${trangThai}\n`;

    if (Array.isArray(noiGiaiQuyet)) {
      msg += `- N∆°i gi·∫£i quy·∫øt:\n${noiGiaiQuyet.map(l => `  ‚Ä¢ ${l}`).join('\n')}`;
    } else {
      msg += `- N∆°i gi·∫£i quy·∫øt: ${noiGiaiQuyet}`;
    }

    return msg;

  } catch (e) {
    return `‚ùå Bi·ªÉn s·ªë: ${bienso} - L·ªói ph√¢n t√≠ch API d·ª± ph√≤ng: ` + e.toString();
  }
}

function sendDiscordDailyPhatNguoiReport() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const timeZone = ss.getSpreadsheetTimeZone();
  const values = sheet.getRange('A:A').getValues();
  const licensePlates = values.map(v => String(v[0] || '').trim().replace(/\s+/g, "").replace(/[^a-zA-Z0-9]/g, "")).filter(v => v);

  if (licensePlates.length === 0) {
    Logger.log('Kh√¥ng c√≥ bi·ªÉn s·ªë.');
    sendDiscordMessage('‚ÑπÔ∏è Kh√¥ng c√≥ bi·ªÉn s·ªë n√†o trong c·ªôt A ƒë·ªÉ tra c·ª©u.');
    return;
  }

  const today = new Date();
  const formattedDate = Utilities.formatDate(today, timeZone, 'dd/MM/yyyy');
  sendDiscordMessage(`üì∞ *B·∫Øt ƒë·∫ßu tra c·ª©u Ph·∫°t Ngu·ªôi ng√†y ${formattedDate} cho ${licensePlates.length} bi·ªÉn s·ªë...*`);

  Utilities.sleep(2000);

  for (const plate of licensePlates) {
    Logger.log('Checking plate: ' + plate);
    const result = getPhatNguoiDataForPlate(plate);
    sendDiscordMessage(result);
    Utilities.sleep(1500);
  }

  Utilities.sleep(2000);
  sendDiscordMessage('üì¢ *Ho√†n th√†nh tra c·ª©u Ph·∫°t Ngu·ªôi h√†ng ng√†y.*');
}

function createDailyTrigger() {
  deleteDailyTrigger();

  ScriptApp.newTrigger('sendDiscordDailyPhatNguoiReport')
    .timeBased()
    .everyDays(1)
    .atHour(8)
    .create();

  SpreadsheetApp.getUi().alert('Th√¥ng b√°o', 'ƒê√£ thi·∫øt l·∫≠p Trigger g·ª≠i b√°o c√°o Discord h√†ng ng√†y v√†o kho·∫£ng 8-9 gi·ªù s√°ng.', SpreadsheetApp.getUi().ButtonSet.OK);
}

function deleteDailyTrigger() {
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(t => {
    if (t.getHandlerFunction() === 'sendDiscordDailyPhatNguoiReport') {
      ScriptApp.deleteTrigger(t);
    }
  });
  SpreadsheetApp.getUi().alert('Th√¥ng b√°o', 'ƒê√£ x√≥a c√°c Trigger b√°o c√°o Discord h√†ng ng√†y.', SpreadsheetApp.getUi().ButtonSet.OK);
}

function onOpen() {
  SpreadsheetApp.getUi().createMenu('Tra C·ª©u Ph·∫°t Ngu·ªôi')
    .addItem('Tra c·ª©u bi·ªÉn s·ªë ƒë√£ ch·ªçn', 'checkPhatNguoiSelectedCell')
    .addSeparator()
    .addItem('Thi·∫øt l·∫≠p b√°o c√°o Discord h√†ng ng√†y', 'createDailyTrigger')
    .addItem('X√≥a b√°o c√°o Discord h√†ng ng√†y', 'deleteDailyTrigger')
    .addToUi();
}
